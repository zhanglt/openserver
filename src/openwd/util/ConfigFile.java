//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project :办公系统
//  @ File Name : ConfigFile.java
//  @ Date : 2007-11-9
//  @ Author :pangyf
//
//

package openwd.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;



/**
 * Config类用于读取config.properties文件。并且对文件内容进行处理。
 * 
 */
public class ConfigFile {

	private static ConfigFile inst;

	private static final String configfile = "config.properties"; // 读取/WEB-INF/calsses/config.properties属性文件
	
	private  static Properties props ;	//Properties工具类对象。
	static Logger log = Logger.getLogger(ConfigFile.class.getName());
	/**
	 * 用于对属性文件读出的结果进行存储
	 */
	private Map map;

	/**
	 * 对inst变量进行实例化
	 */
	public synchronized static ConfigFile getInstance() {
		if (inst == null) {
			inst = new ConfigFile();
		}
		return inst;

	}

	/**
	 * 读取config配置文件
	 */
	public InputStream read() {
		try {
			String confURL = this.getClass().getClassLoader().getResource(
					this.configfile).getFile();
			FileInputStream fileInputStream = new FileInputStream(confURL);

			return fileInputStream;
		} catch (Exception e) {
			// System.out.println(e.toString());
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * 实现对config属性文件写数据
	 * @throws Exception 
	 */
	public void write(Map map,String key) throws NullPointerException {
		String filePath = this.getClass().getResource("/.").getPath(); // 文件绝对路径。
		String pathAddFile = filePath.trim() + this.configfile;
		if (pathAddFile.equals("")) {
			throw new NullPointerException();	//文件不存在空抛出异常
		}
		props = this.popt();
		File configFile = new File(pathAddFile); // 获取文件对象。
		FileWriter fw= null;
		try {
			fw = new FileWriter(configFile);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		PrintWriter out = new PrintWriter(fw);
		for(int i = 0;i<map.size();i++)
		{
			String value = map.get(key).toString();
			props.setProperty(key, value);
			props.list(out);
		}
		out.flush();
		out.close();
	}
	
	/*
	 * Properties 工具类 读取config.Properties文件
	 */
	private Properties popt() throws NullPointerException{
		FileInputStream fileInputStream = null;
		String confURL = this.getClass().getClassLoader().getResource(
				this.configfile).getFile();
		try {
			fileInputStream = new FileInputStream(confURL);

			props = new Properties();
			try {				
				props.load(fileInputStream);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} 
		
		if(props.isEmpty())
		{
			throw new NullPointerException();	//文件为空抛出异常
		}
		
		return props;
	}

	/** */
	public Map loadconfigFile() {
		Map mapone = new HashMap();
		try {

			Properties jndiAllProps = new Properties();
			jndiAllProps.load(this.read()); // 架在config.properties文件
			for (Iterator it = jndiAllProps.keySet().iterator(); it.hasNext();) {
				String key = (String) it.next(); // 得到key
				String value = jndiAllProps.getProperty(key); // 得到值
				mapone.put(key.toLowerCase(), value);
			}
			jndiAllProps.clear();

		} catch (IOException e) {

			e.printStackTrace();
		}

		return mapone;
	}

	/**
	 * 获取key值
	 * 
	 */
	public String getkeyvalue(String key) {
		
		String values = "";
		
		try {
			if (map == null) {
				map = this.loadconfigFile();
			}
	

		 values = map.get(key.toLowerCase()).toString();
		 
		if(!(map.get(key.toLowerCase()) == null))
		{
			values = map.get(key.toLowerCase()).toString();
		}
		else
		{
			
			log.error("key = "+key+" 不正确");
		}
		
		} catch (Exception e) {
			
			log.error("error:"+ e);
		}	
		return values;
		
	}

	public static void main(String[] args) {
		ConfigFile.getInstance().getkeyvalue("ddadfa");
	}
}